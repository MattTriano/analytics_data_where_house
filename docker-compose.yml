version: "3.9"

x-airflow-common:
  &airflow-common
  build:
    context: ./
    dockerfile: ./Dockerfiles/airflow.Dockerfile
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/data_raw:/opt/airflow/data_raw
    - ./airflow/dbt:/opt/airflow/dbt
    - ./airflow/great_expectations:/opt/airflow/great_expectations
    - ./profiles.yml:/home/airflow/.dbt/profiles.yml
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - re_etl_net
  depends_on:
    &airflow-common-depends-on
    airflow_db:
      condition: service_healthy

services:
  airflow_db:
    build:
      context: ./
      dockerfile: Dockerfiles/airflow_db.Dockerfile
    shm_size: 4gb
    env_file:
      - .env
    networks:
      - re_etl_net
    ports:
      - "5432:5432"
    volumes:
      - re_airflow_db:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${POSTGRES_DB}",
          "-U",
          "${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  dwh_db:
    build:
      context: ./
      dockerfile: Dockerfiles/postgis.Dockerfile
    shm_size: 4gb
    env_file:
      - .dwh.env
    networks:
      - re_etl_net
    ports:
      - "5431:5432"
    volumes:
      - re_dwh_db:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${POSTGRES_DB}",
          "-p",
          "5431",
          "-U",
          "${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  db_admin:
    build:
      context: ./
      dockerfile: ./Dockerfiles/pgadmin4.Dockerfile
    env_file:
      - .env
    restart: always
    depends_on:
      - dwh_db
    networks:
      - re_etl_net
    ports:
      - "5678:80"
    volumes:
      - re_etl_admin:/var/lib/pgadmin

  dbt_proj:
    build:
      context: ./
      dockerfile: ./Dockerfiles/dbt.Dockerfile
    env_file:
      - .env
    stdin_open: true
    tty: true
    volumes:
      - ./airflow/dbt:/usr/app
      - ./profiles.yml:/root/.dbt/profiles.yml
    networks:
      - re_etl_net
    ports:
      - "18080:18080"
    depends_on:
      - dwh_db

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/data_raw /sources/dbt
        mkdir -p /sources/great_expectations
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,data_raw,dbt,great_expectations}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./airflow:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  py-utils:
    build:
      context: ./
      dockerfile: ./Dockerfiles/python.Dockerfile
    profiles: [ "testing", "startup" ]
    env_file:
      - .env
    environment:
      GE_JUPYTER_CMD: "jupyter lab --allow-root --ip 0.0.0.0 --port 18888"
    stdin_open: true
    tty: true
    networks:
      - re_etl_net
    ports:
      - "18888:18888"
    entrypoint: [ "/bin/bash" ]
    volumes:
      - ./airflow:/home

  metadata_db:
    container_name: openmetadata_postgresql
    build:
      context: ./
      dockerfile: Dockerfiles/openmetadata_postgresql.Dockerfile
    restart: always
    env_file:
      - .metadata.env
    expose:
      - 5432
    ports:
      - "5433:5432"
    volumes:
      - open_metadata_db:/var/lib/postgresql/data

    networks:
      - app_net
    healthcheck:
      test: psql -U openmetadata_pg -tAc 'select 1' -d openmetadata_db
      interval: 15s
      timeout: 10s
      retries: 10

  elasticsearch:
    container_name: openmetadata_elasticsearch
    build:
      context: ./
      dockerfile: Dockerfiles/openmetadata_elasticsearch.Dockerfile
    env_file:
      - .elastic.env
    networks:
      - app_net
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es-data:/usr/share/elasticsearch/data

  openmetadata-server:
    container_name: openmetadata_server
    restart: always
    build:
      context: ./
      dockerfile: Dockerfiles/openmetadata_server.Dockerfile
    env_file:
      - .metadata.env
    environment:
      # OpenMetadata Server Authentication Configuration
      AUTHORIZER_CLASS_NAME: ${AUTHORIZER_CLASS_NAME:-org.openmetadata.service.security.DefaultAuthorizer}
      AUTHORIZER_REQUEST_FILTER: ${AUTHORIZER_REQUEST_FILTER:-org.openmetadata.service.security.JwtFilter}
      AUTHORIZER_ADMIN_PRINCIPALS: ${AUTHORIZER_ADMIN_PRINCIPALS:-[admin]}
      AUTHORIZER_ALLOWED_REGISTRATION_DOMAIN: ${AUTHORIZER_ALLOWED_REGISTRATION_DOMAIN:-["all"]}
      AUTHORIZER_INGESTION_PRINCIPALS: ${AUTHORIZER_INGESTION_PRINCIPALS:-[ingestion-bot]}
      AUTHORIZER_PRINCIPAL_DOMAIN: ${AUTHORIZER_PRINCIPAL_DOMAIN:-"openmetadata.org"}
      AUTHORIZER_ENFORCE_PRINCIPAL_DOMAIN: ${AUTHORIZER_ENFORCE_PRINCIPAL_DOMAIN:-false}
      AUTHORIZER_ENABLE_SECURE_SOCKET: ${AUTHORIZER_ENABLE_SECURE_SOCKET:-false}
      AUTHENTICATION_PROVIDER: ${AUTHENTICATION_PROVIDER:-basic}
      CUSTOM_OIDC_AUTHENTICATION_PROVIDER_NAME: ${CUSTOM_OIDC_AUTHENTICATION_PROVIDER_NAME:-""}
      AUTHENTICATION_PUBLIC_KEYS: ${AUTHENTICATION_PUBLIC_KEYS:-[http://localhost:8585/api/v1/config/jwks]}
      AUTHENTICATION_AUTHORITY: ${AUTHENTICATION_AUTHORITY:-https://accounts.google.com}
      AUTHENTICATION_CLIENT_ID: ${AUTHENTICATION_CLIENT_ID:-""}
      AUTHENTICATION_CALLBACK_URL: ${AUTHENTICATION_CALLBACK_URL:-""}
      AUTHENTICATION_JWT_PRINCIPAL_CLAIMS: ${AUTHENTICATION_JWT_PRINCIPAL_CLAIMS:-[email,preferred_username,sub]}
      AUTHENTICATION_ENABLE_SELF_SIGNUP: ${AUTHENTICATION_ENABLE_SELF_SIGNUP:-true}
      # JWT Configuration
      RSA_PUBLIC_KEY_FILE_PATH: ${RSA_PUBLIC_KEY_FILE_PATH:-"./conf/public_key.der"}
      RSA_PRIVATE_KEY_FILE_PATH: ${RSA_PRIVATE_KEY_FILE_PATH:-"./conf/private_key.der"}
      JWT_ISSUER: ${JWT_ISSUER:-"open-metadata.org"}
      JWT_KEY_ID: ${JWT_KEY_ID:-"Gb389a-9f76-gdjs-a92j-0242bk94356"}
      # OpenMetadata Server Airflow Configuration
      AIRFLOW_HOST: ${AIRFLOW_HOST:-http://ingestion:8080}
      SERVER_HOST_API_URL: ${SERVER_HOST_API_URL:-http://openmetadata-server:8585/api}
      #Database configuration for postgresql
      DB_DRIVER_CLASS: org.postgresql.Driver
      DB_SCHEME: ${DB_SCHEME:-postgresql}
      DB_USE_SSL: false
      # DB_USER: ${DB_USER:-openmetadata_user}
      # DB_USER_PASSWORD: ${DB_USER_PASSWORD:-openmetadata_password}
      DB_HOST: metadata_db
      DB_PORT: 5432
      OM_DATABASE: ${OM_DATABASE:-openmetadata_db}
      # Airflow SSL Configurations
      AIRFLOW_VERIFY_SSL: ${AIRFLOW_VERIFY_SSL:-"no-ssl"}
      AIRFLOW_SSL_CERT_PATH: ${AIRFLOW_SSL_CERT_PATH:-""}
      # ElasticSearch Configurations
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_SCHEME: http
      # ELASTICSEARCH_USER: ${ELASTICSEARCH_USER:-""}
      # ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:-""}
      # Heap OPTS Configurations
      OPENMETADATA_HEAP_OPTS: ${OPENMETADATA_HEAP_OPTS:--Xmx1G -Xms1G}

    expose:
      - 8585
      - 8586
    ports:
      - "8585:8585"
      - "8586:8586"
    depends_on:
      elasticsearch:
        condition: service_started
      postgresql:
        condition: service_healthy
    networks:
      - app_net
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8586/healthcheck"
        ]

  ingestion:
    container_name: openmetadata_ingestion
    image: adwh_ingestion:0.13.1
    build:
      context: ./
      dockerfile: Dockerfiles/openmetadata_ingestion.Dockerfile
    env_file:
      - .metadata.env
    depends_on:
      elasticsearch:
        condition: service_started
      postgresql:
        condition: service_healthy
      openmetadata-server:
        condition: service_healthy
    environment:
      AIRFLOW__LINEAGE__AIRFLOW_SERVICE_NAME:
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
      AIRFLOW__OPENMETADATA_AIRFLOW_APIS__DAG_GENERATED_CONFIGS: "/opt/airflow/dag_generated_configs"
      DB_HOST: ${AIRFLOW_DB_HOST:-postgresql}
      DB_PORT: ${AIRFLOW_DB_PORT:-5432}
      AIRFLOW_DB: ${AIRFLOW_DB:-airflow_db}
      DB_USER: ${AIRFLOW_DB_USER:-airflow_user}
      DB_SCHEME: ${AIRFLOW_DB_SCHEME:-postgresql+psycopg2}
      DB_PASSWORD: ${AIRFLOW_DB_PASSWORD:-airflow_pass}
    entrypoint: /bin/bash
    command:
      - "/opt/airflow/ingestion_dependency.sh"
    expose:
      - 8080
    ports:
      - "8080:8080"
    networks:
      - app_net
    volumes:
      - ingestion-volume-dag-airflow:/opt/airflow/dag_generated_configs
      - ingestion-volume-dags:/opt/airflow/dags
      - ingestion-volume-tmp:/tmp

networks:
  re_etl_net:
  app_net:
    ipam:
      driver: default
      config:
        - subnet: "172.16.240.0/24"

volumes:
  re_airflow_db:
  re_etl_admin:
  re_dwh_db:
  open_metadata_db:
  ingestion-volume-dag-airflow:
  ingestion-volume-dags:
  ingestion-volume-tmp:
  es-data:
